apply plugin: "com.android.application"
apply plugin: "com.facebook.react"

/**
 * これは、React Native Android アプリをカスタマイズするための構成ブロックです。
 * デフォルトでは、構成を適用する必要はなく、必要な行のコメントを解除するだけです。
 */
react {
    // React Native 特有の設定を行うブロック
    // 多くの設定はコメントアウトされており、必要に応じて有効化できます。
    /* Folders */
    // プロジェクトのルート、つまり「package.json」が存在する場所。デフォルトは '..' です。
    // root = file("../")
    // react-native NPM パッケージがあるフォルダー。デフォルトは ../node_modules/react-native です。
    // reactNativeDir = file("../node_modules/react-native")
    // react-native Codegen パッケージがあるフォルダ
    // codegenDir = file("../node_modules/@react-native/codegen")
    // React Native CLI エントリポイントである cli.js ファイル。デフォルトは ../node_modules/react-native/cli.js です。
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    // デバッグ可能なバリアントのリスト。これらについては、
    // JS バンドルとアセットのバンドルをスキップします。デフォルトでは「debug」のみです。
    // lite、prod などのフレーバーを追加する場合は、debuggableVariants をリストする必要があります。
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * これを true に設定すると、リリース ビルドで Proguard が実行され、Java バイトコードが縮小されます。
 */
def enableProguardInReleaseBuilds = false

/**
* JavaScriptCore (JSC) の推奨ビルド フレーバー
*
* たとえば、国際版バリアントを使用するには、次を使用します:
* `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
*
* 国際版バリアントには、ICU i18n ライブラリと必要なデータが含まれています。
* たとえば、en-US 以外のロケールで使用する場合に正しい結果を提供する `Date.toLocaleString` や
* `String.localeCompare` を使用できます。
* このバリアントは、デフォルトよりもアーキテクチャごとに約 6MiB 大きくなります。
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    // Android NDK (Native Development Kit) のバージョンを設定
    ndkVersion rootProject.ext.ndkVersion

    // コンパイルに使用するSDKバージョンを設定
   compileSdkVersion rootProject.ext.compileSdkVersion

    // アプリケーションのJavaパッケージ名を設定
    namespace "com.testapps"

    // アプリケーションのデフォルト設定
    defaultConfig {
        // アプリケーションのユニークな識別子
        applicationId "com.testapps"
        // サポートする最小のSDKバージョン
        minSdkVersion rootProject.ext.minSdkVersion
        // アプリケーションのターゲットSDKバージョン
        targetSdkVersion rootProject.ext.targetSdkVersion
         // アプリケーションのバージョンコード（内部用）
        versionCode 1
         // アプリケーションのバージョン名（ユーザー向け）
        versionName "1.0"
    }
     // 署名設定
    signingConfigs {
        // デバッグビルド用の署名設定
        debug {
            // デバッグ用のキーストアファイルの場所
            storeFile file('debug.keystore')
            // キーストアのパスワード
            storePassword 'android'
             // 使用するキーのエイリアス
            keyAlias 'androiddebugkey'
            // キーのパスワード
            keyPassword 'android'
        }
    }
     // ビルドタイプの設定
    buildTypes {
        // デバッグビルドの設定
        debug {
             // デバッグビルド用の署名設定を使用
            signingConfig signingConfigs.debug
        }
        // リリースビルドの設定
        release {
            // 注意：本番環境では独自のキーストアファイルを生成する必要があります
            // デバッグ用の署名設定を使用（本番環境では変更が必要）
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            // コード難読化を有効にするかどうか
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    implementation 'com.google.android.gms:play-services-location:21.3.0'
    implementation 'androidx.core:core:1.13.1'
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
